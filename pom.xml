<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>jakartaee-openapi-server</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>jakartaee-openapi-server</name>
  <description>Jakarta EE (Java 21) JAX-RS server generated from OpenAPI JSON using OpenAPI Generator, with Swagger v3 annotations</description>

  <properties>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Tooling versions -->
    <openapi.generator.version>7.8.0</openapi.generator.version>
    <exec-maven-plugin.version>3.3.0</exec-maven-plugin.version>
    <openapi-generator-cli.version>7.8.0</openapi-generator-cli.version>

    <!-- Libraries -->
    <swagger.core.version>2.2.22</swagger.core.version>
    <jackson.version>2.17.2</jackson.version>
    <jersey.version>3.1.6</jersey.version>

    <!-- Project-local output (not target) for server contract generation -->
    <openapi.output.dir>${project.basedir}/generated-sources</openapi.output.dir>
  </properties>

  <dependencies>
    <!-- Jakarta EE API (Servlet/JAX-RS annotations) -->
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <version>10.0.0</version>
      <scope>provided</scope>
    </dependency>

    <!-- Jersey runtime for Tomcat (JAX-RS implementation) -->
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-server</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.containers</groupId>
      <artifactId>jersey-container-servlet</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <version>${jersey.version}</version>
    </dependency>

    <!-- Optional: multipart support if referenced by generated code -->
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-multipart</artifactId>
      <version>${jersey.version}</version>
    </dependency>

    <!-- Swagger/OpenAPI v3 (Jakarta) -->
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-annotations-jakarta</artifactId>
      <version>${swagger.core.version}</version>
    </dependency>
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-models-jakarta</artifactId>
      <version>${swagger.core.version}</version>
    </dependency>
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-jaxrs2-jakarta</artifactId>
      <version>${swagger.core.version}</version>
    </dependency>

    <!-- Jackson (core + JavaTime + Jakarta RS provider) -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jakarta.rs</groupId>
      <artifactId>jackson-jakarta-rs-json-provider</artifactId>
      <version>${jackson.version}</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>jakartaee-openapi-server</finalName>
    <plugins>
      <!-- Clean the generated folder on 'mvn clean' -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.3.2</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>${openapi.output.dir}</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!-- Pre-generate cleanup: ensures a fresh contract generation even without running 'clean' -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>pre-clean-generated-folder</id>
            <phase>generate-sources</phase>
            <configuration>
              <target>
                <delete dir="${openapi.output.dir}" quiet="true"/>
              </target>
            </configuration>
            <goals><goal>run</goal></goals>
          </execution>
        </executions>
      </plugin>

      <!-- OpenAPI Generator: generate only APIs and Models for the server (no impl/factories) -->
      <plugin>
        <groupId>org.openapitools</groupId>
        <artifactId>openapi-generator-maven-plugin</artifactId>
        <version>${openapi.generator.version}</version>
        <executions>
          <execution>
            <id>generate-contracts</id>
            <goals><goal>generate</goal></goals>
            <configuration>
              <inputSpec>${project.basedir}/src/main/resources/openapi.json</inputSpec>
              <!-- To generate contracts only with Jersey templates; alternatively use 'jaxrs-spec' and remove <library> -->
              <generatorName>jaxrs-jersey</generatorName>
              <output>${openapi.output.dir}</output>

              <apiPackage>com.example.api</apiPackage>
              <modelPackage>com.example.model</modelPackage>
              <invokerPackage>com.example.invoker</invokerPackage>

              <apis>true</apis>
              <models>true</models>
              <supportingFiles>false</supportingFiles>

              <configOptions>
                <useJakartaEe>true</useJakartaEe>
                <library>jersey3</library>
                <interfaceOnly>true</interfaceOnly>
                <useBeanValidation>true</useBeanValidation>
                <dateLibrary>java8</dateLibrary>
                <generateSupportingFiles>false</generateSupportingFiles>
              </configOptions>

              <skipOverwrite>false</skipOverwrite>
              <generateAliasAsModel>false</generateAliasAsModel>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Optional safeguard: delete any generated impl/factory folders if templates still write them -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>cleanup-generated-impls</id>
            <phase>process-sources</phase>
            <configuration>
              <target>
                <delete dir="${openapi.output.dir}/src/main/java/com/example/api/impl" quiet="true"/>
              </target>
            </configuration>
            <goals><goal>run</goal></goals>
          </execution>
        </executions>
      </plugin>

      <!-- Add only the generated API/model sources to compilation -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <id>add-generated-sources</id>
            <phase>generate-sources</phase>
            <goals><goal>add-source</goal></goals>
            <configuration>
              <sources>
                <source>${openapi.output.dir}/src/gen/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- OpenAPI Generator CLI via exec: generate Java SDK from src/main/resources/openapi.json (Option A) -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>generate-java-sdk</id>
            <phase>package</phase>
            <goals><goal>java</goal></goals>
            <configuration>
              <mainClass>org.openapitools.codegen.OpenAPIGenerator</mainClass>
              <arguments>
                <argument>generate</argument>
                <argument>-i</argument>
                <argument>${project.basedir}/src/main/resources/openapi.json</argument>
                <argument>-g</argument>
                <argument>java</argument>
                <argument>-o</argument>
                <argument>${project.build.directory}/sdk</argument>
                <argument>--skip-validate-spec</argument>
                <argument>-c</argument>
                <argument>${project.basedir}/swagger-config.json</argument>
              </arguments>
              <includeProjectDependencies>true</includeProjectDependencies>
              <includePluginDependencies>true</includePluginDependencies>
            </configuration>
        </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>openapi-generator-cli</artifactId>
            <version>${openapi-generator-cli.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Java 21 compiler -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>21</release>
        </configuration>
      </plugin>

      <!-- WAR packaging -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.4.0</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
